@model List<Entity.ViewModel.MenuCategoryViewModel>
@{
    Layout = "~/Views/Shared/_SecondLayout.cshtml";
    ViewData["Title"] = "Menu";
}

<div class="row my-4 px-3">
    <div class="col-6 text-Users-title fs-2">Menu</div>
</div>

<ul class="nav nav-tabs px-3" id="menuTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="items-tab" data-bs-toggle="tab" data-bs-target="#items" type="button" role="tab">
            <img src="~/images/menu-item-icon.png" class="me-2" width="20">Items
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="modifiers-tab" data-bs-toggle="tab" data-bs-target="#modifiers" type="button" role="tab">
            <img src="~/images/menu-item-icon.png" class="me-2" width="20">Modifiers
        </button>
    </li>
</ul>

<div class="tab-content mt-3 px-3">
    <!-- Items Tab -->
    <div class="tab-pane fade show active" id="items" role="tabpanel">
        <div class="row">
            <!-- Categories Column -->
            <div class="col-md-2">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>Categories</h5>
                    <button class="btn btn-primary btn-sm" id="addCategoryBtn">
                        <i class="material-icons">add</i>
                    </button>
                </div>
                <div class="list-group" id="categoryList">
                    @foreach (var category in Model)
                    {
                        <a href="#" class="list-group-item list-group-item-action category-item" data-category-id="@category.CategoryId">
                            @category.CategoryName
                            <span class="float-end">
                                <i class="material-icons edit-category" style="font-size:16px;" data-category-id="@category.CategoryId">edit</i>
                                <i class="material-icons delete-category" style="font-size:16px;" data-category-id="@category.CategoryId">delete</i>
                            </span>
                        </a>
                    }
                </div>
            </div>
            <!-- Items Column -->
            <div class="col-md-10">
                <div class="d-flex justify-content-between mb-3">
                    <div class="search-box w-75">
                        <input type="text" class="form-control" id="searchItem" placeholder="Search items">
                    </div>
                    <button class="btn btn-primary" id="addItemBtn">+ New Item</button>
                </div>
                <div class="table-responsive">
                    <table class="table" id="itemsTable">
                        <thead>
                            <tr>
                                <th scope="col" class="text-black-50">Name</th>
                                <th scope="col" class="text-black-50">Item Type</th>
                                <th scope="col" class="text-black-50">Rate</th>
                                <th scope="col" class="text-black-50">Quantity</th>
                                <th scope="col" class="text-black-50">Available</th>
                                <th scope="col" class="text-black-50">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Items will be dynamically loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modifiers Tab -->
    <div class="tab-pane fade" id="modifiers" role="tabpanel">
        <div class="row">
            <!-- Modifier Groups Column -->
            <div class="col-md-2">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>Modifier Groups</h5>
                    <button class="btn btn-primary btn-sm" id="addModifierGroupBtn">
                        <i class="material-icons">add</i>
                    </button>
                </div>
                <div class="list-group" id="modifierGroupList">
                    <!-- Modifier groups will be dynamically loaded here -->
                </div>
            </div>
            <!-- Modifiers Column -->
            <div class="col-md-10">
                <div class="d-flex justify-content-between mb-3">
                    <div class="search-box w-75">
                        <input type="text" class="form-control" id="searchModifier" placeholder="Search modifiers">
                    </div>
                    <button class="btn btn-primary" id="addModifierBtn">+ New Modifier</button>
                </div>
                <div class="table-responsive">
                    <table class="table" id="modifiersTable">
                        <thead>
                            <tr>
                                <th scope="col" class="text-black-50">Name</th>
                                <th scope="col" class="text-black-50">Unit</th>
                                <th scope="col" class="text-black-50">Rate</th>
                                <th scope="col" class="text-black-50">Quantity</th>
                                <th scope="col" class="text-black-50">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Modifiers will be dynamically loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Category Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalTitle">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="categoryForm">
                    <input type="hidden" id="categoryId">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Name *</label>
                        <input type="text" class="form-control" id="categoryName" required>
                    </div>
                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCategory">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Item Modal -->
<div class="modal fade" id="itemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="itemModalTitle">Add Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="itemForm">
                    <input type="hidden" id="itemId">
                    <input type="hidden" id="currentCategoryId">
                    <div class="mb-3">
                        <label for="itemName" class="form-label">Name *</label>
                        <input type="text" class="form-control" id="itemName" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemType" class="form-label">Type *</label>
                        <select class="form-control" id="itemType" required>
                            <option value="">Select Type</option>
                            <option value="Food">Food</option>
                            <option value="Beverage">Beverage</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="itemRate" class="form-label">Rate *</label>
                        <input type="number" step="0.01" class="form-control" id="itemRate" required>
                    </div>
                    <div class="mb-3">
                        <label for="itemQuantity" class="form-label">Quantity *</label>
                        <input type="number" class="form-control" id="itemQuantity" required>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="itemAvailable">
                        <label class="form-check-label" for="itemAvailable">Available</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveItem">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Modifier Group Modal -->
<div class="modal fade" id="modifierGroupModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modifierGroupModalTitle">Add Modifier Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="modifierGroupForm">
                    <input type="hidden" id="modifierGroupId">
                    <div class="mb-3">
                        <label for="modifierGroupName" class="form-label">Name *</label>
                        <input type="text" class="form-control" id="modifierGroupName" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierGroupDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="modifierGroupDescription" rows="1"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="minSelect" class="form-label">Minimum Selection *</label>
                        <input type="number" class="form-control" id="minSelect" min="0" required>
                    </div>
                    <div class="mb-3">
                        <label for="maxSelect" class="form-label">Maximum Selection *</label>
                        <input type="number" class="form-control" id="maxSelect" min="1" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveModifierGroup">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Existing Modifiers Modal -->
<div class="modal fade" id="existingModifiersModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Existing Modifiers</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="modifierSearch" class="form-label">Search</label>
                    <input type="text" class="form-control" id="modifierSearch" placeholder="Search modifiers">
                </div>
                <div class="table-responsive">
                    <table class="table" id="existingModifiersTable">
                        <thead>
                            <tr>
                                <th scope="col" width="50px"></th>
                                <th scope="col" class="text-black-50">Name</th>
                                <th scope="col" class="text-black-50">Unit</th>
                                <th scope="col" class="text-black-50">Rate</th>
                                <th scope="col" class="text-black-50">Quantity</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Existing modifiers will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-between mt-3">
                    <div class="form-group">
                        <select class="form-select" id="pageSizeSelect">
                            <option value="5">5 per page</option>
                            <option value="10" selected>10 per page</option>
                            <option value="20">20 per page</option>
                        </select>
                    </div>
                    <div class="pagination-container">
                        <nav aria-label="Page navigation">
                            <ul class="pagination" id="pagination">
                                <!-- Pagination will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addSelectedModifiers">Add Selected</button>
            </div>
        </div>
    </div>
</div>

<!-- Modifier Modal -->
<div class="modal fade" id="modifierModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modifierModalTitle">Add Modifier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="modifierForm">
                    <input type="hidden" id="modifierId">
                    <div class="mb-3">
                        <label for="modifierGroup" class="form-label">Modifier Group *</label>
                        <select class="form-control" id="modifierGroup" required>
                            <option value="">Select a group</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="modifierName" class="form-label">Name *</label>
                        <input type="text" class="form-control" id="modifierName" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierUnit" class="form-label">Unit *</label>
                        <input type="text" class="form-control" id="modifierUnit" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierRate" class="form-label">Rate *</label>
                        <input type="number" step="0.01" class="form-control" id="modifierRate" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierQuantity" class="form-label">Quantity *</label>
                        <input type="number" class="form-control" id="modifierQuantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="modifierDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="modifierDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveModifier">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="confirmModalBody">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmAction">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Global variables
            let currentCategoryId = null;
            let currentModifierGroupId = null;
            let currentModifierPage = 1;
            let modifierPageSize = 10;
            let tempModifierGroupData = null;
            let actionType = '';
            let itemToDelete = null;
            let deleteUrl = '';

            // Initialize the page
            initPage();

            // Initialize page components
            function initPage() {
                // Load first category items by default if exists
                if ($('.category-item').length > 0) {
                    const firstCategory = $('.category-item').first();
                    currentCategoryId = firstCategory.data('category-id');
                    firstCategory.addClass('active');
                    loadItems(currentCategoryId);
                }

                // Load modifier groups when modifiers tab is shown
                $('#modifiers-tab').on('shown.bs.tab', function () {
                    loadModifierGroups();
                });

                // Set up event handlers
                setupEventHandlers();
            }

            // Set up all event handlers
            function setupEventHandlers() {
                // Category related handlers
                $(document).on('click', '.category-item', function (e) {
                    e.preventDefault();
                    currentCategoryId = $(this).data('category-id');
                    $('.category-item').removeClass('active');
                    $(this).addClass('active');
                    loadItems(currentCategoryId);
                });

                $('#addCategoryBtn').click(function () {
                    showCategoryModal('Add Category');
                });

                $(document).on('click', '.edit-category', function (e) {
                    e.stopPropagation();
                    const categoryId = $(this).data('category-id');
                    loadCategoryData(categoryId);
                });

                $(document).on('click', '.delete-category', function (e) {
                    e.stopPropagation();
                    const categoryId = $(this).data('category-id');
                    showConfirmModal('Are you sure you want to delete this category?', 'deleteCategory', categoryId);
                });

                $('#saveCategory').click(saveCategory);

                // Item related handlers
                $('#addItemBtn').click(function () {
                    if (!currentCategoryId) {
                        alert('Please select a category first');
                        return;
                    }
                    showItemModal('Add Item');
                });

                $('#searchItem').on('input', function () {
                    if (currentCategoryId) {
                        loadItems(currentCategoryId, $(this).val());
                    }
                });

                $('#saveItem').click(saveItem);

                // Modifier group related handlers
                $('#addModifierGroupBtn').click(function () {
                    showModifierGroupModal('Add Modifier Group');
                });

                $('#saveModifierGroup').click(saveModifierGroup);

                // Modifier related handlers
                $('#addModifierBtn').click(function () {
                    showModifierModal('Add Modifier');
                });

                $('#searchModifier').on('input', function () {
                    if (currentModifierGroupId) {
                        loadModifiers(currentModifierGroupId, $(this).val());
                    }
                });

                $('#saveModifier').click(saveModifier);

                // Existing modifiers modal handlers
                $('#modifierSearch').on('input', function () {
                    loadAllModifiers(1, $(this).val());
                });

                $('#pageSizeSelect').change(function () {
                    modifierPageSize = parseInt($(this).val());
                    loadAllModifiers(1, $('#modifierSearch').val());
                });

                $('#addSelectedModifiers').click(addSelectedModifiers);

                // Confirmation modal handler
                $('#confirmAction').click(function () {
                    if (actionType === 'deleteCategory') {
                        deleteCategory(itemToDelete);
                    } else if (actionType === 'deleteItem') {
                        deleteItem(itemToDelete);
                    } else if (actionType === 'deleteModifierGroup') {
                        deleteModifierGroup(itemToDelete);
                    } else if (actionType === 'deleteModifier') {
                        deleteModifier(itemToDelete);
                    } else if (actionType === 'removeModifierFromGroup') {
                        removeModifierFromGroup(itemToDelete, deleteUrl);
                    }
                });
            }

            // Modal functions
            function showCategoryModal(title) {
                $('#categoryModalTitle').text(title);
                $('#categoryForm')[0].reset();
                $('#categoryId').val('');
                $('#categoryModal').modal('show');
            }

            function showItemModal(title) {
                $('#itemModalTitle').text(title);
                $('#itemForm')[0].reset();
                $('#itemId').val('');
                $('#currentCategoryId').val(currentCategoryId);
                $('#itemModal').modal('show');
            }

            function showModifierGroupModal(title) {
                $('#modifierGroupModalTitle').text(title);
                $('#modifierGroupForm')[0].reset();
                $('#modifierGroupId').val('');
                $('#modifierGroupModal').modal('show');
            }

            function showModifierModal(title) {
                $('#modifierModalTitle').text(title);
                $('#modifierForm')[0].reset();
                $('#modifierId').val('');
                loadModifierGroupsForSelect();
                $('#modifierModal').modal('show');
            }

            function showExistingModifiersModal() {
                if (!$('#modifierGroupForm')[0].checkValidity()) {
                    $('#modifierGroupForm')[0].reportValidity();
                    return;
                }

                // Store form data
                tempModifierGroupData = {
                    modifierGroupName: $('#modifierGroupName').val(),
                    description: $('#modifierGroupDescription').val(),
                    minSelect: parseInt($('#minSelect').val()),
                    maxSelect: parseInt($('#maxSelect').val())
                };

                // Hide modifier group modal and show modifiers modal
                $('#modifierGroupModal').modal('hide');
                loadAllModifiers();
                $('#existingModifiersModal').modal('show');
            }

            function showConfirmModal(message, action, itemId, url = '') {
                $('#confirmModalBody').text(message);
                actionType = action;
                itemToDelete = itemId;
                deleteUrl = url;
                $('#confirmModal').modal('show');
            }

            // Load data functions
            function loadItems(categoryId, searchTerm = '') {
                $.ajax({
                    url: '/Menu/GetItems',
                    type: 'GET',
                    data: { categoryId: categoryId, search: searchTerm },
                    success: function (data) {
                        const tbody = $('#itemsTable tbody');
                        tbody.empty();

                        if (data.length === 0) {
                            tbody.append('<tr><td colspan="6" class="text-center">No items found</td></tr>');
                            return;
                        }

                        data.forEach(function (item) {
                            const row = `
                                <tr data-item-id="${item.itemId}">
                                    <td>${item.itemName}</td>
                                    <td>${item.itemType}</td>
                                    <td>${item.rate.toFixed(2)}</td>
                                    <td>${item.quantity}</td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input availability-toggle" type="checkbox" 
                                                ${item.available ? 'checked' : ''} data-item-id="${item.itemId}">
                                        </div>
                                    </td>
                                    <td>
                                        <i class="material-icons edit-item" style="cursor:pointer" data-item-id="${item.itemId}">edit</i>
                                        <i class="material-icons delete-item" style="cursor:pointer" data-item-id="${item.itemId}">delete</i>
                                    </td>
                                </tr>
                            `;
                            tbody.append(row);
                        });

                        // Set up edit and delete handlers for items
                        $('.edit-item').click(function () {
                            const itemId = $(this).data('item-id');
                            loadItemData(itemId);
                        });

                        $('.delete-item').click(function () {
                            const itemId = $(this).data('item-id');
                            showConfirmModal('Are you sure you want to delete this item?', 'deleteItem', itemId);
                        });

                        // Set up availability toggle handler
                        $('.availability-toggle').change(function () {
                            const itemId = $(this).data('item-id');
                            const isAvailable = $(this).is(':checked');
                            toggleItemAvailability(itemId, isAvailable);
                        });
                    },
                    error: function () {
                        alert('Error loading items');
                    }
                });
            }

            function loadCategoryData(categoryId) {
                $.ajax({
                    url: '/Menu/GetCategory',
                    type: 'GET',
                    data: { categoryId: categoryId },
                    success: function (data) {
                        $('#categoryModalTitle').text('Edit Category');
                        $('#categoryId').val(data.categoryId);
                        $('#categoryName').val(data.categoryName);
                        $('#categoryDescription').val(data.description);
                        $('#categoryModal').modal('show');
                    },
                    error: function () {
                        alert('Error loading category data');
                    }
                });
            }

            function loadItemData(itemId) {
                $.ajax({
                    url: '/Menu/GetItem',
                    type: 'GET',
                    data: { itemId: itemId },
                    success: function (data) {
                        $('#itemModalTitle').text('Edit Item');
                        $('#itemId').val(data.itemId);
                        $('#currentCategoryId').val(data.categoryId);
                        $('#itemName').val(data.itemName);
                        $('#itemType').val(data.itemType);
                        $('#itemRate').val(data.rate);
                        $('#itemQuantity').val(data.quantity);
                        $('#itemAvailable').prop('checked', data.available);
                        $('#itemModal').modal('show');
                    },
                    error: function () {
                        alert('Error loading item data');
                    }
                });
            }

            function loadModifierGroups() {
                $.ajax({
                    url: '/Menu/GetModifierGroups',
                    type: 'GET',
                    success: function (data) {
                        const modifierGroupList = $('#modifierGroupList');
                        modifierGroupList.empty();

                        if (data.length === 0) {
                            modifierGroupList.append('<div class="text-muted p-2">No modifier groups found</div>');
                            return;
                        }

                        data.forEach(function (group) {
                            const groupItem = `
                                <a href="#" class="list-group-item list-group-item-action modifier-group-item" 
                                    data-modifier-group-id="${group.modifierGroupId}">
                                    ${group.modifierGroupName}
                                    <span class="float-end">
                                        <i class="material-icons edit-modifier-group" style="font-size:16px;" 
                                            data-modifier-group-id="${group.modifierGroupId}">edit</i>
                                        <i class="material-icons delete-modifier-group" style="font-size:16px;" 
                                            data-modifier-group-id="${group.modifierGroupId}">delete</i>
                                    </span>
                                    ${group.isDeleted ? '<span class="badge bg-danger float-end">Deleted</span>' : ''}
                                </a>
                            `;
                            modifierGroupList.append(groupItem);
                        });

                        // Set up click handlers for modifier groups
                        $('.modifier-group-item').click(function (e) {
                            e.preventDefault();
                            currentModifierGroupId = $(this).data('modifier-group-id');
                            $('.modifier-group-item').removeClass('active');
                            $(this).addClass('active');
                            loadModifiers(currentModifierGroupId);
                        });

                        // Set up edit and delete handlers for modifier groups
                        $('.edit-modifier-group').click(function (e) {
                            e.stopPropagation();
                            const groupId = $(this).data('modifier-group-id');
                            loadModifierGroupData(groupId);
                        });

                        $('.delete-modifier-group').click(function (e) {
                            e.stopPropagation();
                            const groupId = $(this).data('modifier-group-id');
                            showConfirmModal('Are you sure you want to delete this modifier group?', 'deleteModifierGroup', groupId);
                        });

                        // Load modifiers for the first group by default
                        if (data.length > 0) {
                            const firstGroup = $('.modifier-group-item').first();
                            currentModifierGroupId = firstGroup.data('modifier-group-id');
                            firstGroup.addClass('active');
                            loadModifiers(currentModifierGroupId);
                        }
                    },
                    error: function () {
                        alert('Error loading modifier groups');
                    }
                });
            }

            function loadModifierGroupData(modifierGroupId) {
                $.ajax({
                    url: '/Menu/GetModifierGroup',
                    type: 'GET',
                    data: { modifierGroupId: modifierGroupId },
                    success: function (data) {
                        $('#modifierGroupModalTitle').text('Edit Modifier Group');
                        $('#modifierGroupId').val(data.modifierGroupId);
                        $('#modifierGroupName').val(data.modifierGroupName);
                        $('#modifierGroupDescription').val(data.description);
                        $('#minSelect').val(data.minSelect);
                        $('#maxSelect').val(data.maxSelect);
                        $('#modifierGroupModal').modal('show');
                    },
                    error: function () {
                        alert('Error loading modifier group data');
                    }
                });
            }

            function loadModifiers(modifierGroupId, searchTerm = '') {
                $.ajax({
                    url: '/Menu/GetModifiers',
                    type: 'GET',
                    data: { modifierGroupId: modifierGroupId, search: searchTerm },
                    success: function (data) {
                        const tbody = $('#modifiersTable tbody');
                        tbody.empty();

                        if (data.length === 0) {
                            tbody.append('<tr><td colspan="5" class="text-center">No modifiers found for this group</td></tr>');
                            return;
                        }

                        data.forEach(function (modifier) {
                            const row = `
                                <tr data-modifier-id="${modifier.modifierId}">
                                    <td>${modifier.modifierName}</td>
                                    <td>${modifier.unit}</td>
                                    <td>${modifier.rate.toFixed(2)}</td>
                                    <td>${modifier.quantity}</td>
                                    <td>
                                        <i class="material-icons edit-modifier" style="cursor:pointer" 
                                            data-modifier-id="${modifier.modifierId}">edit</i>
                                        <i class="material-icons delete-modifier" style="cursor:pointer" 
                                            data-modifier-id="${modifier.modifierId}" 
                                            data-modifier-group-id="${modifierGroupId}">delete</i>
                                    </td>
                                </tr>
                            `;
                            tbody.append(row);
                        });

                        // Set up edit and delete handlers for modifiers
                        $('.edit-modifier').click(function () {
                            const modifierId = $(this).data('modifier-id');
                            loadModifierData(modifierId);
                        });

                        $('.delete-modifier').click(function () {
                            const modifierId = $(this).data('modifier-id');
                            const groupId = $(this).data('modifier-group-id');
                            showConfirmModal('Are you sure you want to remove this modifier from the group?', 
                                'removeModifierFromGroup', modifierId, groupId);
                        });
                    },
                    error: function () {
                        alert('Error loading modifiers');
                    }
                });
            }

            function loadModifierData(modifierId) {
                $.ajax({
                    url: '/Menu/GetModifier',
                    type: 'GET',
                    data: { modifierId: modifierId },
                    success: function (data) {
                        $('#modifierModalTitle').text('Edit Modifier');
                        $('#modifierId').val(data.modifierId);
                        $('#modifierGroup').val(data.modifierGroupId);
                        $('#modifierName').val(data.modifierName);
                        $('#modifierUnit').val(data.unit);
                        $('#modifierRate').val(data.rate);
                        $('#modifierQuantity').val(data.quantity);
                        $('#modifierDescription').val(data.description);
                        loadModifierGroupsForSelect();
                        $('#modifierModal').modal('show');
                    },
                    error: function () {
                        alert('Error loading modifier data');
                    }
                });
            }

            function loadModifierGroupsForSelect() {
                $.ajax({
                    url: '/Menu/GetModifierGroups',
                    type: 'GET',
                    success: function (data) {
                        const select = $('#modifierGroup');
                        select.empty().append('<option value="">Select a group</option>');
                        data.forEach(function (group) {
                            select.append(`<option value="${group.modifierGroupId}">${group.modifierGroupName}</option>`);
                        });
                    },
                    error: function () {
                        alert('Error loading modifier groups for select');
                    }
                });
            }

            function loadAllModifiers(page = 1, searchTerm = '') {
                currentModifierPage = page;

                $.ajax({
                    url: '/Menu/GetAllModifiers',
                    type: 'GET',
                    data: {
                        page: page,
                        pageSize: modifierPageSize,
                        search: searchTerm
                    },
                    success: function (data) {
                        const tbody = $('#existingModifiersTable tbody');
                        tbody.empty();

                        if (data.modifiers.length === 0) {
                            tbody.append('<tr><td colspan="5" class="text-center">No modifiers found</td></tr>');
                            return;
                        }

                        data.modifiers.forEach(function (modifier) {
                            const row = `
                                <tr>
                                    <td><input type="checkbox" class="form-check-input modifier-check" 
                                            data-modifier-id="${modifier.modifierId}"></td>
                                    <td>${modifier.modifierName}</td>
                                    <td>${modifier.unit}</td>
                                    <td>${modifier.rate.toFixed(2)}</td>
                                    <td>${modifier.quantity}</td>
                                </tr>
                            `;
                            tbody.append(row);
                        });

                        updateModifierPagination(data.totalPages);
                    },
                    error: function () {
                        alert('Error loading all modifiers');
                    }
                });
            }

            function updateModifierPagination(totalPages) {
                const pagination = $('#pagination');
                pagination.empty();

                // Previous button
                const prevLi = $(`<li class="page-item ${currentModifierPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" aria-label="Previous">&laquo;</a>
                </li>`).click(function (e) {
                    e.preventDefault();
                    if (currentModifierPage > 1) {
                        loadAllModifiers(currentModifierPage - 1, $('#modifierSearch').val());
                    }
                });
                pagination.append(prevLi);

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    const li = $(`<li class="page-item ${i === currentModifierPage ? 'active' : ''}">
                        <a class="page-link" href="#">${i}</a>
                    </li>`).click(function (e) {
                        e.preventDefault();
                        loadAllModifiers(i, $('#modifierSearch').val());
                    });
                    pagination.append(li);
                }

                // Next button
                const nextLi = $(`<li class="page-item ${currentModifierPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" aria-label="Next">&raquo;</a>
                </li>`).click(function (e) {
                    e.preventDefault();
                    if (currentModifierPage < totalPages) {
                        loadAllModifiers(currentModifierPage + 1, $('#modifierSearch').val());
                    }
                });
                pagination.append(nextLi);
            }

            // Save functions
            function saveCategory() {
                if (!$('#categoryForm')[0].checkValidity()) {
                    $('#categoryForm')[0].reportValidity();
                    return;
                }

                const categoryData = {
                    categoryId: $('#categoryId').val(),
                    categoryName: $('#categoryName').val(),
                    description: $('#categoryDescription').val()
                };

                const url = categoryData.categoryId ? '/Menu/UpdateCategory' : '/Menu/AddCategory';
                const method = categoryData.categoryId ? 'PUT' : 'POST';

                $.ajax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(categoryData),
                    success: function () {
                        $('#categoryModal').modal('hide');
                        window.location.reload(); // Reload to refresh categories list
                    },
                    error: function () {
                        alert('Error saving category');
                    }
                });
            }

            function saveItem() {
                if (!$('#itemForm')[0].checkValidity()) {
                    $('#itemForm')[0].reportValidity();
                    return;
                }

                const itemData = {
                    itemId: $('#itemId').val(),
                    categoryId: $('#currentCategoryId').val(),
                    itemName: $('#itemName').val(),
                    itemType: $('#itemType').val(),
                    rate: parseFloat($('#itemRate').val()),
                    quantity: parseInt($('#itemQuantity').val()),
                    available: $('#itemAvailable').is(':checked')
                };

                const url = itemData.itemId ? '/Menu/UpdateItem' : '/Menu/AddItem';
                const method = itemData.itemId ? 'PUT' : 'POST';

                $.ajax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(itemData),
                    success: function () {
                        $('#itemModal').modal('hide');
                        loadItems(currentCategoryId, $('#searchItem').val());
                    },
                    error: function () {
                        alert('Error saving item');
                    }
                });
            }

            function saveModifierGroup() {
                if (!$('#modifierGroupForm')[0].checkValidity()) {
                    $('#modifierGroupForm')[0].reportValidity();
                    return;
                }

                const modifierGroupData = {
                    modifierGroupId: $('#modifierGroupId').val(),
                    modifierGroupName: $('#modifierGroupName').val(),
                    description: $('#modifierGroupDescription').val(),
                    minSelect: parseInt($('#minSelect').val()),
                    maxSelect: parseInt($('#maxSelect').val())
                };

                const url = modifierGroupData.modifierGroupId ? '/Menu/UpdateModifierGroup' : '/Menu/AddModifierGroup';
                const method = modifierGroupData.modifierGroupId ? 'PUT' : 'POST';

                $.ajax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(modifierGroupData),
                    success: function (data) {
                        $('#modifierGroupModal').modal('hide');
                        loadModifierGroups();
                        
                        if (!modifierGroupData.modifierGroupId) {
                            // New group created - ask if user wants to add modifiers
                            if (confirm('Modifier group created successfully. Would you like to add modifiers now?')) {
                                currentModifierGroupId = data.modifierGroupId;
                                showModifierModal('Add Modifier');
                            }
                        }
                    },
                    error: function () {
                        alert('Error saving modifier group');
                    }
                });
            }

            function saveModifier() {
                if (!$('#modifierForm')[0].checkValidity()) {
                    $('#modifierForm')[0].reportValidity();
                    return;
                }

                const modifierData = {
                    modifierId: $('#modifierId').val(),
                    modifierGroupId: $('#modifierGroup').val(),
                    modifierName: $('#modifierName').val(),
                    unit: $('#modifierUnit').val(),
                    rate: parseFloat($('#modifierRate').val()),
                    quantity: parseInt($('#modifierQuantity').val()),
                    description: $('#modifierDescription').val()
                };

                const url = modifierData.modifierId ? '/Menu/UpdateModifier' : '/Menu/AddModifier';
                const method = modifierData.modifierId ? 'PUT' : 'POST';

                $.ajax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(modifierData),
                    success: function () {
                        $('#modifierModal').modal('hide');
                        if (currentModifierGroupId) {
                            loadModifiers(currentModifierGroupId, $('#searchModifier').val());
                        }
                    },
                    error: function () {
                        alert('Error saving modifier');
                    }
                });
            }

            function addSelectedModifiers() {
                const selectedModifiers = [];
                $('.modifier-check:checked').each(function () {
                    selectedModifiers.push(parseInt($(this).data('modifier-id')));
                });

                if (selectedModifiers.length === 0) {
                    alert('Please select at least one modifier');
                    return;
                }

                if (!tempModifierGroupData) {
                    alert('Error: No modifier group data found');
                    return;
                }

                // First create the modifier group
                $.ajax({
                    url: '/Menu/AddModifierGroup',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(tempModifierGroupData),
                    success: function (data) {
                        if (data.modifierGroupId) {
                            // Then add the selected modifiers to the new group
                            $.ajax({
                                url: '/Menu/AddModifiersToGroup',
                                type: 'POST',
                                contentType: 'application/json',
                                data: JSON.stringify({
                                    modifierGroupId: data.modifierGroupId,
                                    modifierIds: selectedModifiers
                                }),
                                success: function () {
                                    $('#existingModifiersModal').modal('hide');
                                    loadModifierGroups();
                                    alert('Modifier group created with selected modifiers successfully');
                                },
                                error: function () {
                                    alert('Error adding modifiers to group');
                                }
                            });
                        } else {
                            alert('Error creating modifier group');
                        }
                    },
                    error: function () {
                        alert('Error creating modifier group');
                    }
                });
            }

            // Delete functions
            function deleteCategory(categoryId) {
                $.ajax({
                    url: '/Menu/DeleteCategory',
                    type: 'POST',
                    data: { categoryId: categoryId },
                    success: function () {
                        $('#confirmModal').modal('hide');
                        window.location.reload(); // Reload to refresh categories list
                    },
                    error: function () {
                        alert('Error deleting category');
                    }
                });
            }

            function deleteItem(itemId) {
                $.ajax({
                    url: '/Menu/DeleteItem',
                    type: 'POST',
                    data: { itemId: itemId },
                    success: function () {
                        $('#confirmModal').modal('hide');
                        loadItems(currentCategoryId, $('#searchItem').val());
                    },
                    error: function () {
                        alert('Error deleting item');
                    }
                });
            }

            function deleteModifierGroup(modifierGroupId) {
                $.ajax({
                    url: '/Menu/DeleteModifierGroup',
                    type: 'POST',
                    data: { modifierGroupId: modifierGroupId },
                    success: function () {
                        $('#confirmModal').modal('hide');
                        loadModifierGroups();
                    },
                    error: function () {
                        alert('Error deleting modifier group');
                    }
                });
            }

            function deleteModifier(modifierId) {
                $.ajax({
                    url: '/Menu/DeleteModifier',
                    type: 'POST',
                    data: { modifierId: modifierId },
                    success: function () {
                        $('#confirmModal').modal('hide');
                        if (currentModifierGroupId) {
                            loadModifiers(currentModifierGroupId, $('#searchModifier').val());
                        }
                    },
                    error: function () {
                        alert('Error deleting modifier');
                    }
                });
            }

            function removeModifierFromGroup(modifierId, modifierGroupId) {
                $.ajax({
                    url: '/Menu/RemoveModifierFromGroup',
                    type: 'POST',
                    data: {
                        modifierGroupId: modifierGroupId,
                        modifierId: modifierId
                    },
                    success: function () {
                        $('#confirmModal').modal('hide');
                        loadModifiers(modifierGroupId, $('#searchModifier').val());
                    },
                    error: function () {
                        alert('Error removing modifier from group');
                    }
                });
            }

            // Toggle item availability
            function toggleItemAvailability(itemId, isAvailable) {
                $.ajax({
                    url: '/Menu/ToggleItemAvailability',
                    type: 'POST',
                    data: {
                        itemId: itemId,
                        isAvailable: isAvailable
                    },
                    success: function () {
                        // No need to do anything, the UI is already updated
                    },
                    error: function () {
                        alert('Error updating item availability');
                        // Revert the toggle
                        $(`.availability-toggle[data-item-id="${itemId}"]`).prop('checked', !isAvailable);
                    }
                });
            }
        });
    </script>
}